// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: getfeeds.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const getFeeds = `-- name: GetFeeds :many
SELECT 
    feeds.created_at,
    feeds.name,
    feeds.url,
    users.name
FROM feeds
LEFT JOIN users
    ON users.id = feeds.user_id
ORDER BY
    feeds.created_at DESC
`

type GetFeedsRow struct {
	CreatedAt time.Time
	Name      string
	Url       string
	Name_2    sql.NullString
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(
			&i.CreatedAt,
			&i.Name,
			&i.Url,
			&i.Name_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
